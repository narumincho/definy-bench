// source: schema.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Member', null, global);
goog.exportSymbol('proto.Pattern', null, global);
goog.exportSymbol('proto.Product', null, global);
goog.exportSymbol('proto.Sum', null, global);
goog.exportSymbol('proto.Type', null, global);
goog.exportSymbol('proto.TypeAttribute', null, global);
goog.exportSymbol('proto.TypeParameter', null, global);
goog.exportSymbol('proto.TypePart', null, global);
goog.exportSymbol('proto.TypePartBody', null, global);
goog.exportSymbol('proto.TypePartBody.BodyCase', null, global);
goog.exportSymbol('proto.TypePartBodyKernel', null, global);
goog.exportSymbol('proto.TypePartIdAndData', null, global);
goog.exportSymbol('proto.TypePartIdAndTypePartList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TypePartIdAndTypePartList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TypePartIdAndTypePartList.repeatedFields_, null);
};
goog.inherits(proto.TypePartIdAndTypePartList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TypePartIdAndTypePartList.displayName = 'proto.TypePartIdAndTypePartList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TypePartIdAndData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TypePartIdAndData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TypePartIdAndData.displayName = 'proto.TypePartIdAndData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TypePart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TypePart.repeatedFields_, null);
};
goog.inherits(proto.TypePart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TypePart.displayName = 'proto.TypePart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TypeParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TypeParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TypeParameter.displayName = 'proto.TypeParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TypePartBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.TypePartBody.oneofGroups_);
};
goog.inherits(proto.TypePartBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TypePartBody.displayName = 'proto.TypePartBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Sum.repeatedFields_, null);
};
goog.inherits(proto.Sum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Sum.displayName = 'proto.Sum';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Pattern = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Pattern, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Pattern.displayName = 'proto.Pattern';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Product = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Product.repeatedFields_, null);
};
goog.inherits(proto.Product, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Product.displayName = 'proto.Product';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Member = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Member, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Member.displayName = 'proto.Member';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Type.repeatedFields_, null);
};
goog.inherits(proto.Type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Type.displayName = 'proto.Type';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TypePartIdAndTypePartList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TypePartIdAndTypePartList.prototype.toObject = function(opt_includeInstance) {
  return proto.TypePartIdAndTypePartList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TypePartIdAndTypePartList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TypePartIdAndTypePartList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: jspb.Message.toObjectList(msg.getValueList(),
    proto.TypePartIdAndData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TypePartIdAndTypePartList}
 */
proto.TypePartIdAndTypePartList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TypePartIdAndTypePartList;
  return proto.TypePartIdAndTypePartList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TypePartIdAndTypePartList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TypePartIdAndTypePartList}
 */
proto.TypePartIdAndTypePartList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TypePartIdAndData;
      reader.readMessage(value,proto.TypePartIdAndData.deserializeBinaryFromReader);
      msg.addValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TypePartIdAndTypePartList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TypePartIdAndTypePartList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TypePartIdAndTypePartList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TypePartIdAndTypePartList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TypePartIdAndData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TypePartIdAndData value = 1;
 * @return {!Array<!proto.TypePartIdAndData>}
 */
proto.TypePartIdAndTypePartList.prototype.getValueList = function() {
  return /** @type{!Array<!proto.TypePartIdAndData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TypePartIdAndData, 1));
};


/**
 * @param {!Array<!proto.TypePartIdAndData>} value
 * @return {!proto.TypePartIdAndTypePartList} returns this
*/
proto.TypePartIdAndTypePartList.prototype.setValueList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TypePartIdAndData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TypePartIdAndData}
 */
proto.TypePartIdAndTypePartList.prototype.addValue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TypePartIdAndData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TypePartIdAndTypePartList} returns this
 */
proto.TypePartIdAndTypePartList.prototype.clearValueList = function() {
  return this.setValueList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TypePartIdAndData.prototype.toObject = function(opt_includeInstance) {
  return proto.TypePartIdAndData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TypePartIdAndData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TypePartIdAndData.toObject = function(includeInstance, msg) {
  var f, obj = {
    typePartId: msg.getTypePartId_asB64(),
    typePart: (f = msg.getTypePart()) && proto.TypePart.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TypePartIdAndData}
 */
proto.TypePartIdAndData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TypePartIdAndData;
  return proto.TypePartIdAndData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TypePartIdAndData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TypePartIdAndData}
 */
proto.TypePartIdAndData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTypePartId(value);
      break;
    case 2:
      var value = new proto.TypePart;
      reader.readMessage(value,proto.TypePart.deserializeBinaryFromReader);
      msg.setTypePart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TypePartIdAndData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TypePartIdAndData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TypePartIdAndData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TypePartIdAndData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypePartId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTypePart();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TypePart.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes type_part_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.TypePartIdAndData.prototype.getTypePartId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes type_part_id = 1;
 * This is a type-conversion wrapper around `getTypePartId()`
 * @return {string}
 */
proto.TypePartIdAndData.prototype.getTypePartId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTypePartId()));
};


/**
 * optional bytes type_part_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTypePartId()`
 * @return {!Uint8Array}
 */
proto.TypePartIdAndData.prototype.getTypePartId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTypePartId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.TypePartIdAndData} returns this
 */
proto.TypePartIdAndData.prototype.setTypePartId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional TypePart type_part = 2;
 * @return {?proto.TypePart}
 */
proto.TypePartIdAndData.prototype.getTypePart = function() {
  return /** @type{?proto.TypePart} */ (
    jspb.Message.getWrapperField(this, proto.TypePart, 2));
};


/**
 * @param {?proto.TypePart|undefined} value
 * @return {!proto.TypePartIdAndData} returns this
*/
proto.TypePartIdAndData.prototype.setTypePart = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TypePartIdAndData} returns this
 */
proto.TypePartIdAndData.prototype.clearTypePart = function() {
  return this.setTypePart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TypePartIdAndData.prototype.hasTypePart = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TypePart.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TypePart.prototype.toObject = function(opt_includeInstance) {
  return proto.TypePart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TypePart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TypePart.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    projectId: msg.getProjectId_asB64(),
    attribute: jspb.Message.getFieldWithDefault(msg, 4, 0),
    typeParameterList: jspb.Message.toObjectList(msg.getTypeParameterList(),
    proto.TypeParameter.toObject, includeInstance),
    body: (f = msg.getBody()) && proto.TypePartBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TypePart}
 */
proto.TypePart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TypePart;
  return proto.TypePart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TypePart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TypePart}
 */
proto.TypePart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProjectId(value);
      break;
    case 4:
      var value = /** @type {!proto.TypeAttribute} */ (reader.readEnum());
      msg.setAttribute(value);
      break;
    case 5:
      var value = new proto.TypeParameter;
      reader.readMessage(value,proto.TypeParameter.deserializeBinaryFromReader);
      msg.addTypeParameter(value);
      break;
    case 6:
      var value = new proto.TypePartBody;
      reader.readMessage(value,proto.TypePartBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TypePart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TypePart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TypePart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TypePart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProjectId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAttribute();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTypeParameterList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.TypeParameter.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.TypePartBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.TypePart.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TypePart} returns this
 */
proto.TypePart.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.TypePart.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TypePart} returns this
 */
proto.TypePart.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes project_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.TypePart.prototype.getProjectId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes project_id = 3;
 * This is a type-conversion wrapper around `getProjectId()`
 * @return {string}
 */
proto.TypePart.prototype.getProjectId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProjectId()));
};


/**
 * optional bytes project_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProjectId()`
 * @return {!Uint8Array}
 */
proto.TypePart.prototype.getProjectId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProjectId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.TypePart} returns this
 */
proto.TypePart.prototype.setProjectId = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional TypeAttribute attribute = 4;
 * @return {!proto.TypeAttribute}
 */
proto.TypePart.prototype.getAttribute = function() {
  return /** @type {!proto.TypeAttribute} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.TypeAttribute} value
 * @return {!proto.TypePart} returns this
 */
proto.TypePart.prototype.setAttribute = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * repeated TypeParameter type_parameter = 5;
 * @return {!Array<!proto.TypeParameter>}
 */
proto.TypePart.prototype.getTypeParameterList = function() {
  return /** @type{!Array<!proto.TypeParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TypeParameter, 5));
};


/**
 * @param {!Array<!proto.TypeParameter>} value
 * @return {!proto.TypePart} returns this
*/
proto.TypePart.prototype.setTypeParameterList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.TypeParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TypeParameter}
 */
proto.TypePart.prototype.addTypeParameter = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.TypeParameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TypePart} returns this
 */
proto.TypePart.prototype.clearTypeParameterList = function() {
  return this.setTypeParameterList([]);
};


/**
 * optional TypePartBody body = 6;
 * @return {?proto.TypePartBody}
 */
proto.TypePart.prototype.getBody = function() {
  return /** @type{?proto.TypePartBody} */ (
    jspb.Message.getWrapperField(this, proto.TypePartBody, 6));
};


/**
 * @param {?proto.TypePartBody|undefined} value
 * @return {!proto.TypePart} returns this
*/
proto.TypePart.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TypePart} returns this
 */
proto.TypePart.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TypePart.prototype.hasBody = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TypeParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.TypeParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TypeParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TypeParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    typePartId: msg.getTypePartId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TypeParameter}
 */
proto.TypeParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TypeParameter;
  return proto.TypeParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TypeParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TypeParameter}
 */
proto.TypeParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTypePartId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TypeParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TypeParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TypeParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TypeParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTypePartId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.TypeParameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TypeParameter} returns this
 */
proto.TypeParameter.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes type_part_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.TypeParameter.prototype.getTypePartId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes type_part_id = 2;
 * This is a type-conversion wrapper around `getTypePartId()`
 * @return {string}
 */
proto.TypeParameter.prototype.getTypePartId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTypePartId()));
};


/**
 * optional bytes type_part_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTypePartId()`
 * @return {!Uint8Array}
 */
proto.TypeParameter.prototype.getTypePartId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTypePartId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.TypeParameter} returns this
 */
proto.TypeParameter.prototype.setTypePartId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.TypePartBody.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.TypePartBody.BodyCase = {
  BODY_NOT_SET: 0,
  SUM: 1,
  PRODUCT: 2,
  KERNEL: 3
};

/**
 * @return {proto.TypePartBody.BodyCase}
 */
proto.TypePartBody.prototype.getBodyCase = function() {
  return /** @type {proto.TypePartBody.BodyCase} */(jspb.Message.computeOneofCase(this, proto.TypePartBody.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TypePartBody.prototype.toObject = function(opt_includeInstance) {
  return proto.TypePartBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TypePartBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TypePartBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    sum: (f = msg.getSum()) && proto.Sum.toObject(includeInstance, f),
    product: (f = msg.getProduct()) && proto.Product.toObject(includeInstance, f),
    kernel: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TypePartBody}
 */
proto.TypePartBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TypePartBody;
  return proto.TypePartBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TypePartBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TypePartBody}
 */
proto.TypePartBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Sum;
      reader.readMessage(value,proto.Sum.deserializeBinaryFromReader);
      msg.setSum(value);
      break;
    case 2:
      var value = new proto.Product;
      reader.readMessage(value,proto.Product.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 3:
      var value = /** @type {!proto.TypePartBodyKernel} */ (reader.readEnum());
      msg.setKernel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TypePartBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TypePartBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TypePartBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TypePartBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSum();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Sum.serializeBinaryToWriter
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Product.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.TypePartBodyKernel} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional Sum sum = 1;
 * @return {?proto.Sum}
 */
proto.TypePartBody.prototype.getSum = function() {
  return /** @type{?proto.Sum} */ (
    jspb.Message.getWrapperField(this, proto.Sum, 1));
};


/**
 * @param {?proto.Sum|undefined} value
 * @return {!proto.TypePartBody} returns this
*/
proto.TypePartBody.prototype.setSum = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.TypePartBody.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TypePartBody} returns this
 */
proto.TypePartBody.prototype.clearSum = function() {
  return this.setSum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TypePartBody.prototype.hasSum = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Product product = 2;
 * @return {?proto.Product}
 */
proto.TypePartBody.prototype.getProduct = function() {
  return /** @type{?proto.Product} */ (
    jspb.Message.getWrapperField(this, proto.Product, 2));
};


/**
 * @param {?proto.Product|undefined} value
 * @return {!proto.TypePartBody} returns this
*/
proto.TypePartBody.prototype.setProduct = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.TypePartBody.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TypePartBody} returns this
 */
proto.TypePartBody.prototype.clearProduct = function() {
  return this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TypePartBody.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TypePartBodyKernel kernel = 3;
 * @return {!proto.TypePartBodyKernel}
 */
proto.TypePartBody.prototype.getKernel = function() {
  return /** @type {!proto.TypePartBodyKernel} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.TypePartBodyKernel} value
 * @return {!proto.TypePartBody} returns this
 */
proto.TypePartBody.prototype.setKernel = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.TypePartBody.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TypePartBody} returns this
 */
proto.TypePartBody.prototype.clearKernel = function() {
  return jspb.Message.setOneofField(this, 3, proto.TypePartBody.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TypePartBody.prototype.hasKernel = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Sum.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Sum.prototype.toObject = function(opt_includeInstance) {
  return proto.Sum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Sum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sum.toObject = function(includeInstance, msg) {
  var f, obj = {
    patternList: jspb.Message.toObjectList(msg.getPatternList(),
    proto.Pattern.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sum}
 */
proto.Sum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sum;
  return proto.Sum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sum}
 */
proto.Sum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Pattern;
      reader.readMessage(value,proto.Pattern.deserializeBinaryFromReader);
      msg.addPattern(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Sum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatternList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Pattern.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Pattern pattern = 1;
 * @return {!Array<!proto.Pattern>}
 */
proto.Sum.prototype.getPatternList = function() {
  return /** @type{!Array<!proto.Pattern>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Pattern, 1));
};


/**
 * @param {!Array<!proto.Pattern>} value
 * @return {!proto.Sum} returns this
*/
proto.Sum.prototype.setPatternList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Pattern=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Pattern}
 */
proto.Sum.prototype.addPattern = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Pattern, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Sum} returns this
 */
proto.Sum.prototype.clearPatternList = function() {
  return this.setPatternList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Pattern.prototype.toObject = function(opt_includeInstance) {
  return proto.Pattern.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Pattern} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Pattern.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    parameter: (f = msg.getParameter()) && proto.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Pattern}
 */
proto.Pattern.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Pattern;
  return proto.Pattern.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Pattern} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Pattern}
 */
proto.Pattern.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.Type;
      reader.readMessage(value,proto.Type.deserializeBinaryFromReader);
      msg.setParameter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Pattern.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Pattern.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Pattern} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Pattern.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParameter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Pattern.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Pattern} returns this
 */
proto.Pattern.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.Pattern.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Pattern} returns this
 */
proto.Pattern.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Type parameter = 3;
 * @return {?proto.Type}
 */
proto.Pattern.prototype.getParameter = function() {
  return /** @type{?proto.Type} */ (
    jspb.Message.getWrapperField(this, proto.Type, 3));
};


/**
 * @param {?proto.Type|undefined} value
 * @return {!proto.Pattern} returns this
*/
proto.Pattern.prototype.setParameter = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Pattern} returns this
 */
proto.Pattern.prototype.clearParameter = function() {
  return this.setParameter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Pattern.prototype.hasParameter = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Product.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Product.prototype.toObject = function(opt_includeInstance) {
  return proto.Product.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Product} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Product.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberList: jspb.Message.toObjectList(msg.getMemberList(),
    proto.Member.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Product}
 */
proto.Product.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Product;
  return proto.Product.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Product} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Product}
 */
proto.Product.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Member;
      reader.readMessage(value,proto.Member.deserializeBinaryFromReader);
      msg.addMember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Product.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Product.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Product} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Product.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Member.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Member member = 1;
 * @return {!Array<!proto.Member>}
 */
proto.Product.prototype.getMemberList = function() {
  return /** @type{!Array<!proto.Member>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Member, 1));
};


/**
 * @param {!Array<!proto.Member>} value
 * @return {!proto.Product} returns this
*/
proto.Product.prototype.setMemberList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Member=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Member}
 */
proto.Product.prototype.addMember = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Member, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.clearMemberList = function() {
  return this.setMemberList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Member.prototype.toObject = function(opt_includeInstance) {
  return proto.Member.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Member} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Member.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: (f = msg.getType()) && proto.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Member}
 */
proto.Member.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Member;
  return proto.Member.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Member} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Member}
 */
proto.Member.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.Type;
      reader.readMessage(value,proto.Type.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Member.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Member.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Member} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Member.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Member.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Member} returns this
 */
proto.Member.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.Member.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Member} returns this
 */
proto.Member.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Type type = 3;
 * @return {?proto.Type}
 */
proto.Member.prototype.getType = function() {
  return /** @type{?proto.Type} */ (
    jspb.Message.getWrapperField(this, proto.Type, 3));
};


/**
 * @param {?proto.Type|undefined} value
 * @return {!proto.Member} returns this
*/
proto.Member.prototype.setType = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Member} returns this
 */
proto.Member.prototype.clearType = function() {
  return this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Member.prototype.hasType = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Type.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Type.prototype.toObject = function(opt_includeInstance) {
  return proto.Type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Type.toObject = function(includeInstance, msg) {
  var f, obj = {
    typePartId: msg.getTypePartId_asB64(),
    parameterList: jspb.Message.toObjectList(msg.getParameterList(),
    proto.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Type}
 */
proto.Type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Type;
  return proto.Type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Type}
 */
proto.Type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTypePartId(value);
      break;
    case 2:
      var value = new proto.Type;
      reader.readMessage(value,proto.Type.deserializeBinaryFromReader);
      msg.addParameter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypePartId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getParameterList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes type_part_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Type.prototype.getTypePartId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes type_part_id = 1;
 * This is a type-conversion wrapper around `getTypePartId()`
 * @return {string}
 */
proto.Type.prototype.getTypePartId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTypePartId()));
};


/**
 * optional bytes type_part_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTypePartId()`
 * @return {!Uint8Array}
 */
proto.Type.prototype.getTypePartId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTypePartId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Type} returns this
 */
proto.Type.prototype.setTypePartId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Type parameter = 2;
 * @return {!Array<!proto.Type>}
 */
proto.Type.prototype.getParameterList = function() {
  return /** @type{!Array<!proto.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Type, 2));
};


/**
 * @param {!Array<!proto.Type>} value
 * @return {!proto.Type} returns this
*/
proto.Type.prototype.setParameterList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Type}
 */
proto.Type.prototype.addParameter = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Type} returns this
 */
proto.Type.prototype.clearParameterList = function() {
  return this.setParameterList([]);
};


/**
 * @enum {number}
 */
proto.TypeAttribute = {
  AS_BOOLEAN: 0,
  AS_UNDEFINED: 1
};

/**
 * @enum {number}
 */
proto.TypePartBodyKernel = {
  FUNCTION: 0,
  INT32: 1,
  STRING: 2,
  BINARY: 3,
  ID: 4,
  TOKEN: 5,
  LIST: 6
};

goog.object.extend(exports, proto);
